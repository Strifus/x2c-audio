// This file was generated by createLibraryBuilder.sce on 06-01-2020 12:05

funcprot(0);
jimport at.lcm.x2c.utils.Utils;
msvc = findmsvccompiler();
if(msvc ~= "unknown") then 
    bOK = configure_msvc();
end
if ~haveacompiler() then
    mprintf("Building Audio library for linux64 system skipped (no compiler found).\n");
    [compileCompFDone] = return(%f)
end

X2C_ROOT = jinvoke(jinvoke(Utils, "getRootDirectory"), "toString");
X2C_LIB_PATH = get_absolute_file_path("builder_linux64.sce");
X2C_LIB_PATH = dirname(X2C_LIB_PATH);

try
    // delete "is-compiled" marker
    mdelete("Library_is_compiled_for_linux64.txt");

    // prepare names and flags for building command
    names = [];
    files = [];
    names = [names,  "x2c_RectangleWav_FiP8_C" "x2c_RectangleWav_FiP16_C" "x2c_RectangleWav_FiP32_C" "x2c_RectangleWav_Float32_C" "x2c_RectangleWav_Float64_C"];
    files = [files,  "x2c_RectangleWav_FiP8_C.c" "x2c_RectangleWav_FiP16_C.c" "x2c_RectangleWav_FiP32_C.c" "x2c_RectangleWav_Float32_C.c" "x2c_RectangleWav_Float64_C.c"];
    names = [names,  "x2c_SineWave_FiP8_C" "x2c_SineWave_FiP16_C" "x2c_SineWave_FiP32_C" "x2c_SineWave_Float32_C" "x2c_SineWave_Float64_C"];
    files = [files,  "x2c_SineWave_FiP8_C.c" "x2c_SineWave_FiP16_C.c" "x2c_SineWave_FiP32_C.c" "x2c_SineWave_Float32_C.c" "x2c_SineWave_Float64_C.c"];
    names = [names,  "x2c_TriangleWave_FiP8_C" "x2c_TriangleWave_FiP16_C" "x2c_TriangleWave_FiP32_C" "x2c_TriangleWave_Float32_C" "x2c_TriangleWave_Float64_C"];
    files = [files,  "x2c_TriangleWave_FiP8_C.c" "x2c_TriangleWave_FiP16_C.c" "x2c_TriangleWave_FiP32_C.c" "x2c_TriangleWave_Float32_C.c" "x2c_TriangleWave_Float64_C.c"];
    files = [files, "x2c_Utils.c"];
    flag = "c";
    loadername = "loader_linux64.sce";
    libname = "Audio_linux64";
    ldflags = SCI + "/bin/scicos.lib";
    cflags = "-I/usr/include/scilab" + " -I" + X2C_ROOT + "/Controller/Common" + " -I" + X2C_LIB_PATH + "/Controller/src" + " -I" + X2C_LIB_PATH + "/Controller/inc" + " -include string.h";
    // build library
    ilib_for_link(names, files, [], flag, "", loadername, libname, ldflags, cflags);

    // delete temporary files
    if isdir("Debug") then
      rmdir("Debug","s");
    end
    if isdir("Release") then
      rmdir("Release","s");
    end
    mdelete("cleaner.sce")
    mdelete("Makelib.mak")

    // create "is-compiled" marker
    currentTime=clock();
    save("Library_is_compiled_for_linux64.txt", "currentTime");

    mprintf("Library Audio for linux64 system built.\n");

catch
    mprintf("Error building library Audio for linux64 system: %s\n", lasterror());
end
